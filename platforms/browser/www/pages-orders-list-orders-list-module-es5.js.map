{"version":3,"sources":["webpack:///src/app/pages/orders-list/orders-list.page.html","webpack:///src/app/pages/orders-list/orders-list-routing.module.ts","webpack:///src/app/pages/orders-list/orders-list.module.ts","webpack:///src/app/pages/orders-list/orders-list.page.scss","webpack:///src/app/pages/orders-list/orders-list.page.ts"],"names":["routes","path","component","OrdersListPageRoutingModule","imports","forChild","exports","OrdersListPageModule","declarations","OrdersListPage","apiService","router","alertCtrl","toastController","loadingController","loadingSpin","orders","loaded","urlStr","token","status","workerId","getCurrentNavigation","extras","state","console","log","getItemsByMethod","subscribe","resp","occupationsList","loadOrders","error2","error","JSON","stringify","a","b","dateA","Date","workDate","getTime","dateB","reqField","fieldName","fieldValue","toPromise","then","sort","sortFunction","forEach","wo","occupationSelected","filter","occupation","id","occupationId","occupationAvatar","statusColor","expiresIn","remainingTime","dismiss","event","target","complete","order","navigationExtras","navigate","orderTIme","currentTime","newDate","diff","Math","abs","round","longitude","latitude","message","create","duration","toast","present","selector","template"],"mappings":"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","file":"pages-orders-list-orders-list-module-es5.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar color=\\\"dark\\\">\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button defaultHref=\\\"/\\\"></ion-back-button>\\n        </ion-buttons>\\n        <ion-title>\\n            Listado de Ordenes ({{status}})\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-no-padding\\\">    \\n    <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"updateData($event)\\\">\\n        <ion-refresher-content pullingIcon=\\\"arrow-dropdown\\\" pullingText=\\\"Pull to refresh\\\" refreshingSpinner=\\\"circles\\\" refreshingText=\\\"Refreshing...\\\">\\n        </ion-refresher-content>\\n    </ion-refresher>\\n    <div *ngIf=\\\"!loaded\\\">\\n        <ion-list>\\n            <ion-item *ngFor=\\\"let i of [0,1,2,3,4,5,6,7,8]\\\">\\n                <ion-thumbnail slot=\\\"start\\\">\\n                    <ion-skeleton-text animated></ion-skeleton-text>\\n                </ion-thumbnail>\\n                <ion-label>\\n                    <h3>\\n                        <ion-skeleton-text animated style=\\\"width: 50%;\\\"></ion-skeleton-text>\\n                    </h3>\\n                    <p>\\n                        <ion-skeleton-text animated style=\\\"width: 80%;\\\"></ion-skeleton-text>\\n                    </p>\\n                    <p>\\n                        <ion-skeleton-text animated style=\\\"width: 60%;\\\"></ion-skeleton-text>\\n                    </p>\\n                </ion-label>\\n            </ion-item>\\n        </ion-list>\\n    </div>\\n    <ion-list style=\\\"background-color: lightgray !important;\\\">\\n        <ion-card *ngFor=\\\"let ord of orders\\\" class=\\\"ion-no-padding\\\" (click)=\\\"openDetails(ord)\\\">\\n            <ion-item style=\\\"background-color: #F5F5F5 !important;\\\">\\n                <ion-avatar slot=\\\"start\\\">\\n                    <img *ngIf=\\\" ord.profileImage && ord.profileImage !== '' \\\" [src]=\\\"ord.profileImage\\\" />\\n                    <img *ngIf=\\\" !ord.profileImage ||ord.profileImage === '' \\\" src=\\\"../../../assets/profiles/profile.jpg\\\" />\\n                </ion-avatar>\\n                <ion-label style=\\\"color: #515D73 !important\\\">\\n                    <h2><span style=\\\"color: #253659 !important; font-weight: bold;\\\">{{ord.occupationName}}</span></h2>\\n                    <p>{{ord.clientName}}</p>                    \\n                    </ion-label>\\n            </ion-item>\\n            <ion-card-content>\\n                {{ord.description.substr(0,150)}}                \\n            </ion-card-content>\\n            <img src=\\\"https://maps.googleapis.com/maps/api/staticmap?zoom=13&size=640x350&maptype=roadmap&markers=color:red%7C{{ord.latitude}},{{ord.longitude}}&key=AIzaSyDfI8fbeuGwtgTJxEMABzDwHZ8GTH11Tiw\\\" />\\n            <ion-card-header>\\n                <ion-card-subtitle>{{ord.address}}</ion-card-subtitle>\\n                <p>{{ ord.workDate | date: 'medium' }}</p>\\n            </ion-card-header>                                  \\n        </ion-card>\\n        <!-- <ion-item-sliding *ngFor=\\\"let ord of orders\\\">\\n            <ion-item class=\\\".ion-justify-content-start\\\" lines=\\\"none\\\" (click)=\\\"openDetails(ord)\\\">\\n                <ion-avatar>\\n                    <img src=\\\"{{ord.occupationImage}}\\\" class=\\\".ion-align-self-center\\\" />\\n                    <ion-grid>\\n                        <ion-row class=\\\"ion-text-center\\\">\\n                            <ion-col>\\n                                <ion-text color=\\\"dark\\\">\\n                                    <b><font size=\\\"3\\\">{{ord.occupationName}}</font></b>\\n                                </ion-text>\\n                            </ion-col>\\n                        </ion-row>\\n                    </ion-grid>\\n                </ion-avatar>\\n                <ion-label>\\n                    <ion-text color=\\\"dark\\\">\\n                        <b><font size=\\\"1\\\">Nombre del solicitante</font></b>\\n                    </ion-text>\\n                    <ion-text color=\\\"dark\\\">\\n                        <p>{{ ord.clientName}}</p>\\n                    </ion-text>\\n\\n                    <ion-text color=\\\"dark\\\">\\n                        <b><font size=\\\"1\\\">Descripción</font></b>\\n                    </ion-text>\\n                    <ion-text color=\\\"dark\\\">\\n                        <p>{{ord.description.substr(0,100)}}</p>\\n                    </ion-text>\\n\\n                    <ion-text color=\\\"dark\\\">\\n                        <b><font size=\\\"1\\\">Dirección</font></b>\\n                    </ion-text>\\n                    <ion-text color=\\\"dark\\\">\\n                        <p>{{ord.address}}</p>\\n                    </ion-text>\\n\\n                    <ion-text color=\\\"dark\\\">\\n                        <b><font size=\\\"1\\\">Fecha de la orden</font></b>\\n                    </ion-text>\\n                    <ion-text color=\\\"dark\\\">\\n                        <p>{{ ord.workDate | date: 'medium' }}</p>\\n                    </ion-text>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item-options side=\\\"end\\\">\\n                <ion-item-option color=\\\"dark\\\" (click)=\\\"updateStateOfOrder(ord.orderId,'ACCEPTED')\\\">\\n                    <ion-icon  slot=\\\"top\\\" name=\\\"thumbs-up\\\"></ion-icon>\\n                    Aceptar\\n                </ion-item-option>\\n                <ion-item-option color=\\\"xjobs\\\" (click)=\\\"updateStateOfOrder(ord.orderId,'REJECTED')\\\">\\n                    <ion-icon  slot=\\\"top\\\" name=\\\"thumbs-down\\\"></ion-icon>\\n                    Rechazar\\n                </ion-item-option>\\n            </ion-item-options>\\n        </ion-item-sliding> -->\\n    </ion-list>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { OrdersListPage } from './orders-list.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OrdersListPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OrdersListPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { OrdersListPageRoutingModule } from './orders-list-routing.module';\n\nimport { OrdersListPage } from './orders-list.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    OrdersListPageRoutingModule\n  ],\n  declarations: [OrdersListPage]\n})\nexport class OrdersListPageModule {}\n","export default \".icon {\\n  display: inline-block;\\n  font-size: 12px;\\n  vertical-align: middle;\\n}\\n\\n.text {\\n  font-size: 12px;\\n  display: inline-block;\\n  vertical-align: middle;\\n  color: darkblue;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYWx2YXJhZG8vZGVzYXJyb2xsby9lbmlhY2d0L2lvbmljL3hKb2JzL3hKb2JzV29ya2VyL3NyYy9hcHAvcGFnZXMvb3JkZXJzLWxpc3Qvb3JkZXJzLWxpc3QucGFnZS5zY3NzIiwic3JjL2FwcC9wYWdlcy9vcmRlcnMtbGlzdC9vcmRlcnMtbGlzdC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUJBO0VBQ0UscUJBQUE7RUFDQSxlQUFBO0VBQ0Esc0JBQUE7QUN0QkY7O0FEeUJBO0VBQ0UsZUFBQTtFQUNBLHFCQUFBO0VBQ0Esc0JBQUE7RUFDQSxlQUFBO0FDdEJGIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvb3JkZXJzLWxpc3Qvb3JkZXJzLWxpc3QucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW9uLWF2YXRhciB7XG4vLyAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbi8vICAgdG9wOiAzJTtcbi8vICAgcmlnaHQ6IDMlO1xuLy8gICB3aWR0aDogNzBweDtcbi8vICAgaGVpZ2h0OiA3MHB4O1xuLy8gICAvLyBtYXJnaW4tcmlnaHQ6IDIwcHg7XG4vLyAgIC8vIG1hcmdpbi10b3A6IC0zNXB4O1xuLy8gICBib3JkZXI6IHNvbGlkIDJweCAjRDk1QTJCO1xuLy8gfVxuXG4vLyBwIHtcbi8vICAgd2hpdGUtc3BhY2U6IG5vcm1hbCAhaW1wb3J0YW50O1xuLy8gICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuLy8gICBmb250LXNpemU6IDEwcHg7XG4vLyAgIGxpbmUtaGVpZ2h0OiAxLjQ7XG4vLyB9XG4vLyBpb24taXRlbSB7XG4vLyAgIC0tYm9yZGVyLXJhZGl1czogMWVtO1xuLy8gICAtLWJvcmRlci13aWR0aDogMC4xZW0gIWltcG9ydGFudDtcbi8vICAgbWFyZ2luLWJvdHRvbTogMC4zZW07XG4vLyB9XG5cbi5pY29uIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBmb250LXNpemU6IDEycHg7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5cbi50ZXh0IHtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIGNvbG9yOiBkYXJrYmx1ZTtcbn1cbiIsIi5pY29uIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBmb250LXNpemU6IDEycHg7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5cbi50ZXh0IHtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIGNvbG9yOiBkYXJrYmx1ZTtcbn0iXX0= */\";","import { Component, OnInit } from \"@angular/core\";\nimport { Router, NavigationExtras } from \"@angular/router\";\nimport { WorkOrderHistoryDTO } from \"src/app/models/dto/WorkOrderHistoryDTO\";\nimport { Occupations } from \"src/app/models/bo/Occupations\";\nimport { ApiService } from \"src/app/services/api.service\";\nimport { RequestFields } from \"src/app/models/bo/request-fields\";\nimport {\n  AlertController,\n  ToastController,\n  LoadingController,\n} from \"@ionic/angular\";\n\n@Component({\n  selector: \"app-orders-list\",\n  templateUrl: \"./orders-list.page.html\",\n  styleUrls: [\"./orders-list.page.scss\"],\n})\nexport class OrdersListPage implements OnInit {\n  loadingSpin=null;\n  orders: WorkOrderHistoryDTO[] = [];\n  occupationsList: Occupations[];\n  loaded = false;\n  urlStr = \"/in-progress2/requested2\";\n  token: string = \"\";\n  status: string = \"\";\n  workerId: string = \"\";\n\n  constructor(\n    private apiService: ApiService,\n    private router: Router,\n    private alertCtrl: AlertController,\n    private toastController: ToastController,\n    public loadingController: LoadingController\n  ) {\n    if (this.router.getCurrentNavigation().extras.state) {\n      this.status = this.router.getCurrentNavigation().extras.state.status;\n      this.token = this.router.getCurrentNavigation().extras.state.token;\n      this.workerId = this.router.getCurrentNavigation().extras.state.workerId;\n\n      \n    } else {\n      console.log(\"no trae nada\", this.router.getCurrentNavigation().extras);\n    }\n  }\n\n  ionViewWillEnter() {\n    this.apiService\n        .getItemsByMethod(\"occupations\", \"\", null, this.token)\n        .subscribe(\n          (resp) => {\n            this.occupationsList = resp as Occupations[];\n            //console.log(\"si esta el token\", this.token);\n\n            this.loadOrders();\n          },\n          (error2) => {\n            console.error(JSON.stringify(error2));\n          }\n        );\n  }\n\n  ngOnInit() {}\n\n  sortFunction(a,b){  \n    var dateA = new Date(a.workDate).getTime();\n    var dateB = new Date(b.workDate).getTime();\n    return dateB > dateA ? 1 : -1;  \n  };\n\n  loadOrders() {\n    const reqField: RequestFields[] = [\n      { fieldName: \"workerId\", fieldValue: this.workerId },\n      { fieldName: \"status\", fieldValue: this.status },\n    ];\n    this.apiService\n      .getItemsByMethod(\n        \"workOrders\",\n        \"getOrdersByWorkerIdAndStatus\",\n        reqField,\n        this.token\n      )\n      .toPromise()\n      .then(\n        (resp: WorkOrderHistoryDTO[]) => {\n          // console.log(\"loadOrders()\",resp);\n\n          resp.sort(this.sortFunction);​\n\n          this.orders = resp;\n          this.orders.forEach((wo) => {\n            const occupationSelected = this.occupationsList.filter(\n              (occupation) => occupation.id === wo.occupationId\n            );\n            wo.occupation = occupationSelected[0][\"name\"];\n            wo.occupationAvatar = occupationSelected[0][\"categoryImage\"];\n\n            if (wo.status === \"NEW\") {\n              wo.statusColor = \"success\";\n              wo.status = \"NEW\";\n            }\n            wo.expiresIn = this.remainingTime(wo.workDate);\n          });\n          this.loaded = true;\n          // console.log(this.orders);\n          if(this.loadingSpin != null){\n            this.loadingSpin.dismiss();\n          }\n        },\n        (error2) => {\n          console.error(JSON.stringify(error2));\n        }\n      );\n  }\n\n  updateData(event) {\n    this.loaded = false;\n    this.loadOrders();\n    event.target.complete();\n  }\n\n  async openDetails(order) {\n    const navigationExtras: NavigationExtras = {\n      state: {\n        status,\n        order,\n        token: this.token,\n        workerId: this.workerId\n      },\n    };\n    this.router.navigate([\"orders-details\"], navigationExtras);\n  }\n\n  remainingTime(orderTIme: Date) {\n    const currentTime = new Date();\n    const newDate = new Date(orderTIme);\n    let diff = (newDate.getTime() - currentTime.getTime()) / 1000;\n\n    diff /= 60;\n\n    return 120 - Math.abs(Math.round(diff));\n  }\n\n  goLocation(longitude: number, latitude: number){\n  }\n\n  async presentToast(message) {\n    const toast = await this.toastController.create({\n      message: message,\n      duration: 2000,\n    });\n    toast.present();\n  }\n}\n"]}